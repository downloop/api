// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// delete a session by id
	// (DELETE /session/{id})
	DeleteSessionId(ctx echo.Context, id openapi_types.UUID) error
	// set a session by id
	// (GET /session/{id})
	GetSessionId(ctx echo.Context, id openapi_types.UUID) error

	// (GET /sessions)
	GetSessions(ctx echo.Context) error

	// (POST /sessions)
	PostSessions(ctx echo.Context) error

	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error

	// (POST /users)
	PostUsers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteSessionId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSessionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSessionId(ctx, id)
	return err
}

// GetSessionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSessionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSessionId(ctx, id)
	return err
}

// GetSessions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSessions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSessions(ctx)
	return err
}

// PostSessions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSessions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSessions(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/session/:id", wrapper.DeleteSessionId)
	router.GET(baseURL+"/session/:id", wrapper.GetSessionId)
	router.GET(baseURL+"/sessions", wrapper.GetSessions)
	router.POST(baseURL+"/sessions", wrapper.PostSessions)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWy27cOgz9FYP3Lt3MpO3Ky6JFEaCLIkVWQRAoFj1RYD0i0i0GA/97IXpeHjuJ006S",
	"rmxIFHl4eEhpBaW3wTt0TFCsgMpbtEp+v8ToY/oJ0QeMbFCWS68xfXkZEAowjnGBEdocLBKpxf4mcTRu",
	"AW2bQ8T7xkTUUFx2Lnb2V/nG3t/cYcnJ1w8kMt4Nw6PT12ysRKl8tIqhAK0Y38lqfhg6B6N7tk1j9JgZ",
	"sYr8TNcNYbye5P+AATHZi/gIBd898TFoeH5+B5inwT1HCt4RDiFrxSp9/49YQQH/zXbKm61lN9uU/TC2",
	"nJ0Q9ZsZI2sT2TBamgxhG03FqJbTIV0QjrTNRBUmRTllJzSRnN+aPwRkXD3TozwZ4O/qLVw9i9kjVroL",
	"/mdlTmbGVV4YNFynPe1/udr7kKlgIIefGLsRBqcn85N5iuQDurRZwAdZyiEovhWgM+p0N1sZ3UoqWCML",
	"rSlBxca7Mw0FfJb1tUrPtPiIyiJjJCguV2BSyOQXcuiK3GlllxXHBvP1qJ8yu67S4Y52wfp+/rFDSGU0",
	"gbskO7xaCKTGWhWX29VMZev0sptlZnTiYoE8TO4r8htnNu/uOMfoBJ8KoTalIJzdUXcj7fxPGCTbBhHN",
	"9DnbkBI8cUZNWSJR1dQHHBLykMA230pGkK/p7Ps/R26io0xltSHOfJWlfs625/IH6Sd4PWaklR9hR7D3",
	"2GlzCOvB1k8gjbteBvcNEn/yenls8DJY2/60SOprB7yd/huKEsWk8u/LZVD+CzEY77z7BuNy13q1sYZh",
	"v9usccY2ForTfPA8bPNxL76qCPtuBkdfsksHd8oIqcLaHpv1UjSJMsc0Vqqp+WiAumf3CApMG1kZUbFx",
	"C+nkp1phU82X6IPt6+KVm6D36HigWGuWvOu1wNvXqm3b3wEAAP//AxxV7HENAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
